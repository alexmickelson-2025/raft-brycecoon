@page "/"
@rendermode InteractiveServer
@using DistributedTDDProject1

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-12 text-center">
            <button class="btn btn-primary btn-lg" @onclick="startSimulation">Start Simulation</button>
        </div>
    </div>

    <div class="row">
        <div class="mb-4">
            <h2>Set</h2>
            <label>Node:</label>
            <select @bind="selectedNodeId">
                <option>SELECT A NODE</option>
                @foreach(var node in nodes)
                {
                    <option value="@node.id">@node.id</option>
                }
            </select>
            <label for="keyInput">Key:</label>
            <input type="text" id="keyInput" @bind=keyInput/>
            <label for="valueInput">Value:</label>
            <input type="text" id="valueInput" @bind=valueInput/>
            <button @onclick="SendLogToLeader">send</button>
            <p>Response To Request: @setCommmandReceived</p>

        </div>
        @foreach (var node in nodes)
        {
            <div class="col-12 col-md-4 mb-4">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Node: @node.id</h5>
                        <p><strong>State:</strong> @node.state</p>
                        <p><strong>Term:</strong> @node.term</p>
                        <p><strong>Perceived Current Leader:</strong> @node.currentLeader</p>
                        <p><strong>Timeout:</strong> @(node.timeoutInterval * timeoutMultiplier)</p>

                        <!-- Progress Bar -->
                        <div class="progress" role="progressbar" aria-label="Timeout Progress"
                             aria-valuenow="@node.timeoutInterval"
                             aria-valuemin="0" aria-valuemax="@(300 * timeoutMultiplier)">
                            <div class="progress-bar bg-success"
                                 style="width: @(((node.timeoutInterval)/(double)(300)) * 100)%"></div>
                        </div>

                        <button @onClick="() => PauseNode(node.id)">
                            Stop Node
                        </button>

                        <p>Commit Index: @node.highestCommittedLogIndex</p>
                        <p>prevIndex: @node.prevIndex</p>
                        <h2>Journal Entries</h2>
                        <div>
                            @foreach (var (log, index) in node.logs.Select((log, index) => (log, index)))
                            {
                                <p>
                                    Index: @index | Key: @log.key | Term Id: @log.term | Committed?:
                                    @(node.stateMachine.ContainsKey(log.key) ? "Yes" : "No")
                                </p>
                            }
                        </div>

                        <h2>State Machine</h2>
                        <div>
                            @foreach (var state in node.stateMachine)
                            {
                                <p>Key: @state.Key Value: @state.Value</p>
                            }
                        </div>
                    </div>
                </div>
                <div>
                    Network Delay: @node.networkDelay
                </div>
            </div>
        }
    </div>

    <div class="row mt-5">
        <div class="col-12 col-md-6">
            <div class="slider-item mb-4">
                <label for="networkDelay">Network Delay (seconds)</label>
                <input type="range" id="networkDelay" @onchange="changeNetworkDelay" min="0" max="5" step="0.1" class="form-range" />
                <div class="slider-value">Slider Value: @networkDelay</div>
            </div>

            <div class="slider-item">
                <label for="timeoutMultiplier">Timeout Multiplier</label>
                <input type="range" id="timeoutMultiplier" @onchange="changeElectionTimoutMultiplier" min="1" max="5" step="1" class="form-range" />
                <div class="slider-value">Slider Value: @timeoutMultiplier X</div>
            </div>
        </div>
    </div>

</div>

@code {
    List<SimulationNode> nodes = new();
    private Timer timer;
    private double networkDelay = 0;
    private int timeoutMultiplier = 1;
    private string keyInput;
    private string valueInput;
    private Guid selectedNodeId;
    public bool setCommmandReceived = false;


    void changeElectionTimoutMultiplier(ChangeEventArgs e)
    {
        timeoutMultiplier = int.Parse(e.Value.ToString());
        foreach (var node in nodes)
        {
            node.InnerNode.timeoutMultiplier = timeoutMultiplier;
        }
    }

    void changeNetworkDelay(ChangeEventArgs e)
    {
        networkDelay = double.Parse(e.Value.ToString());
        foreach (var node in nodes)
        {
            node.networkDelay = networkDelay;
        }
    }

    void startSimulation()
    {
        var node1 = new Node();
        var node2 = new Node();
        var node3 = new Node();

        var SimulationNode1 = new SimulationNode(node1);
        var SimulationNode2 = new SimulationNode(node2);
        var SimulationNode3 = new SimulationNode(node3);

        node1.neighbors = new[] { SimulationNode2, SimulationNode3 };
        node2.neighbors = new[] { SimulationNode1, SimulationNode3 };
        node3.neighbors = new[] { SimulationNode1, SimulationNode2 };

        nodes = new List<SimulationNode> { SimulationNode1, SimulationNode2, SimulationNode3 };

        StateHasChanged();

        timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    void PauseNode(Guid nodeToPauseId)
    {
        var node = nodes.FirstOrDefault((n) => n.id == nodeToPauseId);
        node.Pause();
    }

    async void SendLogToLeader()
    {
        SimulationNode receivingNode = nodes.FirstOrDefault(n => n.id == selectedNodeId);
        if (receivingNode == null)
        {
            throw new Exception("receiving Node was Null");
        }

        // Await the task directly without using .Result
        setCommmandReceived = await receivingNode.receiveCommandFromClient(keyInput, valueInput);
    }
}
